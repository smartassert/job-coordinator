# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    users_security_bundle_base_url: '%env(string:AUTHENTICATION_BASE_URL)%'
    users_security_bundle_public_pattern: '^/(status)|(health-check)'
    users_security_bundle_secured_pattern: '^/*'
    users_security_bundle_access_control_path: '^/*'
    health_check_bundle_enable_status_readiness_inspector: true
    health_check_bundle_status_is_ready: '%env(bool:IS_READY)%'
    health_check_bundle_enable_status_version_inspector: true
    health_check_bundle_status_version: '%env(VERSION)%'
    message_delays:
        App\Message\StartWorkerJobMessage: '%env(int:START_WORKER_JOB_DELAY_MS)%'
        App\Message\GetSerializedSuiteMessage: '%env(int:SERIALIZED_SUITE_STATE_CHANGE_CHECK_PERIOD_MS)%'
        App\Message\GetMachineMessage: '%env(int:MACHINE_STATE_CHANGE_CHECK_PERIOD_MS)%'
        App\Message\CreateResultsJobMessage: '%env(int:CREATE_RESULTS_JOB_DISPATCH_DELAY_MS)%'
        App\Message\GetResultsJobStateMessage: '%env(RESULTS_JOB_STATE_CHANGE_CHECK_PERIOD_MS)%'
        App\Message\GetWorkerStateMessage: '%env(GET_WORKER_STATE_CHANGE_CHECK_PERIOD_MS)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    _instanceof:
        App\Services\RemoteRequestFailureFactory\ExceptionHandlerInterface:
            tags: ['app.remote_request_failure_factory.exception_handler']
        App\Services\JobComponentHandler\JobComponentHandlerInterface:
            tags: ['app.job_component_handler.component_handler']
#        App\Model\JobComponent:
#            tags: ['app.job_components.component']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    Psr\Http\Client\ClientInterface:
        class: GuzzleHttp\Client

    GuzzleHttp\Psr7\HttpFactory: ~

    Psr\Http\Message\RequestFactoryInterface:
        alias: GuzzleHttp\Psr7\HttpFactory

    Psr\Http\Message\StreamFactoryInterface:
        alias: GuzzleHttp\Psr7\HttpFactory

    SmartAssert\ServiceClient\ExceptionFactory\CurlExceptionFactory: ~

    SmartAssert\ResultsClient\ResourceReferenceFactory: ~

    SmartAssert\ResultsClient\EventFactory: ~

    SmartAssert\ResultsClient\Client:
        arguments:
            $baseUrl: '%env(string:RESULTS_BASE_URL)%'

    SmartAssert\WorkerManagerClient\RequestFactory:
        arguments:
            $baseUrl: '%env(string:WORKER_MANAGER_BASE_URL)%'

    SmartAssert\WorkerManagerClient\Client: ~

    SmartAssert\SourcesClient\ExceptionFactory: ~

    SmartAssert\SourcesClient\SerializedSuiteFactory: ~

    SmartAssert\SourcesClient\RequestFactory:
        arguments:
            $baseUrl: '%env(string:SOURCES_BASE_URL)%'

    SmartAssert\SourcesClient\SerializedSuiteClient: ~

    SmartAssert\WorkerClient\ResourceReferenceFactory: ~

    SmartAssert\WorkerClient\EventFactory: ~

    SmartAssert\WorkerClient\TestFactory: ~

    SmartAssert\WorkerClient\JobFactory: ~

    App\Messenger\DelayMiddleware:
        arguments:
            $delays: '%message_delays%'

    App\Services\RemoteRequestFailureFactory\RemoteRequestFailureFactory:
        arguments:
            $handlers: !tagged_iterator 'app.remote_request_failure_factory.exception_handler'

    app.job_components.results_job:
        class: App\Model\JobComponent
        arguments:
            $name: !php/enum App\Enum\JobComponentName::RESULTS_JOB
            $requestType: !php/enum App\Enum\RemoteRequestType::RESULTS_CREATE
        tags: ['app.job_components.component']

    app.job_components.serialized_suite:
        class: App\Model\JobComponent
        arguments:
            $name: !php/enum App\Enum\JobComponentName::SERIALIZED_SUITE
            $requestType: !php/enum App\Enum\RemoteRequestType::SERIALIZED_SUITE_CREATE
        tags: ['app.job_components.component']

    app.job_components.machine:
        class: App\Model\JobComponent
        arguments:
            $name: !php/enum App\Enum\JobComponentName::MACHINE
            $requestType: !php/enum App\Enum\RemoteRequestType::MACHINE_CREATE
        tags: ['app.job_components.component']

    app.job_components.worker_job:
        class: App\Model\JobComponent
        arguments:
            $name: !php/enum App\Enum\JobComponentName::WORKER_JOB
            $requestType: !php/enum App\Enum\RemoteRequestType::MACHINE_START_JOB
        tags: ['app.job_components.component']

    App\Services\ComponentPreparationFactory:
        arguments:
            $jobComponents: !tagged_iterator 'app.job_components.component'
            $jobComponentHandlers: !tagged_iterator 'app.job_component_handler.component_handler'

    App\Services\RequestStatesFactory:
        arguments:
            $jobComponents: !tagged_iterator 'app.job_components.component'
            $jobComponentHandlers: !tagged_iterator 'app.job_component_handler.component_handler'

    SmartAssert\ServiceClient\ResponseFactory\ResponseFactory:
        factory: ['SmartAssert\ServiceClient\ResponseFactory\ResponseFactory', 'createFactory']

    SmartAssert\ServiceClient\Client: ~

    SmartAssert\ServiceRequest\Exception\ErrorResponseExceptionFactory: ~

    SmartAssert\ServiceRequest\Parameter\Validator\PositiveIntegerParameterValidator: ~
